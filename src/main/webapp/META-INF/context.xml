<!-- this is apparently where tomcat keeps it's datasource configuration.
  as per http://tomcat.apache.org/tomcat-6.0-doc/jndi-resources-howto.html#Global%20configuration 
  and http://tomcat.apache.org/tomcat-6.0-doc/config/context.html#Resource%20Links
  -->

<!--  no idea what context path or docBase to use here -->
<Context path="/dmx-web" docBase="dmx-web"
        debug="5" reloadable="true" crossContext="true">

    <!-- maxActive: Maximum number of dB connections in pool. Make sure you
         configure your mysqld max_connections large enough to handle
         all of your db connections. Set to 0 for no limit.
         -->

    <!-- maxIdle: Maximum number of idle dB connections to retain in pool.
         Set to -1 for no limit.  See also the DBCP documentation on this
         and the minEvictableIdleTimeMillis configuration parameter.
         -->

    <!-- maxWait: Maximum time to wait for a dB connection to become available
         in ms, in this example 10 seconds. An Exception is thrown if
         this timeout is exceeded.  Set to -1 to wait indefinitely.
         -->

    <!-- username and password: MySQL dB username and password for dB connections  -->

    <!-- driverClassName: Class name for the old mm.mysql JDBC driver is
         org.gjt.mm.mysql.Driver - we recommend using Connector/J though.
         Class name for the official MySQL Connector/J driver is com.mysql.jdbc.Driver.
         -->

    <!-- url: The JDBC connection url for connecting to your MySQL dB.
         The autoReconnect=true argument to the url makes sure that the
         mm.mysql JDBC Driver will automatically reconnect if mysqld closed the
         connection.  mysqld by default closes idle connections after 8 hours.
         -->

<!--  keeping this as an example of a fixed JDBC resource

  <Resource name="jdbc/xxxxDataSource" auth="Container" type="javax.sql.DataSource"
               maxActive="100" maxIdle="30" maxWait="10000"
               username="xxxx" password="xxxx" driverClassName="com.mysql.jdbc.Driver"
               url="jdbc:mysql://xxxx:3306/xxxx?autoReconnect=true"/>
-->
     
     <!--  this is a reference to a (server) global JDBC resource; don't strictly need to
     specify these here, but doing so serves as doc'n that the
     webapp uses the DS.
     
     Although, having said that, if this isn't in here, then the global JNDI lookup fails
      
     The 'name' declaration creates a java:comp/env resource
     that points to the global 'global' resource defined in server.xml.
     -->
     <ResourceLink name="jdbc/comedyWebDataSource" global="jdbc/comedyWebDataSource"
            type="javax.sql.DataSource" />
     
</Context>     