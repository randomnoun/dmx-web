package com.randomnoun.dmx.web.action;

import java.io.*;
import java.net.URLEncoder;
import java.sql.*;
import java.util.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.*;
import org.springframework.dao.support.DataAccessUtils;
import org.springframework.jdbc.core.JdbcTemplate;

import com.randomnoun.common.ErrorList;
import com.randomnoun.common.Text;
import com.randomnoun.common.Struct;
import com.randomnoun.common.http.HttpUtil;
import com.randomnoun.common.security.User;
import com.randomnoun.common.spring.StructuredResultReader;
import com.randomnoun.dmx.config.AppConfig;
import com.randomnoun.dmx.dao.FixtureDAO;
import com.randomnoun.dmx.dao.FixtureDefDAO;
import com.randomnoun.dmx.to.FixtureTO;
import com.randomnoun.dmx.web.Table;
import com.randomnoun.dmx.web.TableEditor;
import com.randomnoun.dmx.web.TableEditor.TableEditorResult;


/**
 * Stock entry action
 *
 * Forwards generated by this action:
 * <attributes>
 * success - displays entry page
 * </attributes>
 *
 * @version         $Id$
 * @author          knoxg
 */
public class MaintainFixtureAction
    extends Action {
    /** A revision marker to be used in exception stack traces. */
    public static final String _revision = "$Id$";

    /** Logger instance for this class */
    private static final Logger logger = Logger.getLogger(MaintainFixtureAction.class);

	public Map getParameterMap(HttpServletRequest request) {
		Map map = new HashMap();
		for (Enumeration e = request.getParameterNames(); e.hasMoreElements();) {
			String param = (String) e.nextElement();
			map.put(param, request.getParameter(param));
		}
		return map;
	}



    public static class FixtureTableEditor extends TableEditor {

    	private final static String[] fieldNames = 
    		new String[] { "id", "fixtureDefId", "name", "dmxOffset" };
    	
    	// @TODO this is all rather silly...
    	
    	@Override
		public void createRow(Map row) throws Exception {
    		AppConfig appConfig = AppConfig.getAppConfig();
    		JdbcTemplate jt = appConfig.getJdbcTemplate();
    		FixtureDAO fixtureDAO = new FixtureDAO(jt);
    		FixtureTO fixture = new FixtureTO();
    		Struct.setFromMap(fixture, row, false, true, false, fieldNames);
    		fixtureDAO.createFixture(fixture);
		}

		@Override
		public void updateRow(Map row) throws Exception {
			JdbcTemplate jt = AppConfig.getAppConfig().getJdbcTemplate();
    		FixtureDAO fixtureDAO = new FixtureDAO(jt);
    		FixtureTO fixture = new FixtureTO();
    		Struct.setFromMap(fixture, row, false, true, false, fieldNames);
    		fixtureDAO.updateFixture(fixture);
		}

		@Override
		public void deleteRow(Map row) throws Exception {
			JdbcTemplate jt = AppConfig.getAppConfig().getJdbcTemplate();
    		FixtureDAO fixtureDAO = new FixtureDAO(jt);
    		FixtureTO fixture = new FixtureTO();
    		Struct.setFromMap(fixture, row, false, true, false, fieldNames);
    		fixtureDAO.deleteFixture(fixture);
		}

		private void init() {
    	}

    	public void removeEmptyRows(Map form) {
    		removeEmptyRows(form, fieldNames, "fixtures");
    	}
    	
    	/**
    	 * Validates information passed down from the presentation layer.  Checks for
    	 * mandatory and maximum length.
    	 *
    	 * @param row the row containing information for each stocked item to be maintained
    	 *
    	 * @return true if validation successful or false otherwise
    	 */
    	public boolean validateRow(Map row) {
    	    boolean valid = true;
    	    valid = valid & table.checkMandatory("fixtureDefId", 10, "Fixture type"); // @TODO check against IDs in DB
    	    valid = valid & table.checkMandatory("name", 100, "Name");
    	    valid = valid & table.checkMandatory("dmxOffset", 10, "DMX offset");
    	    valid = valid & table.checkNumeric("dmxOffset", "DMX offset");
    	    return valid;
    	}
    	  
    	  
    	public TableEditorResult maintainFixtures(Map request) {
    		TableEditorResult result;
		    List updateErrors;
		    
		    table = new Table(request, "fixtures", "id", String.class);
		    table.setEditableKey(false);
		    init();

		    // table validation and maintenance
    		if (!validateTable() || !maintainTable()) {
		        // updates failed
    			result = getResult();
    			result.setRows(getTable().getRows());
    			result.setErrors(getTable().getErrors());
    		} else {
    			result = getResult();
    			result.setRows(getFixtures());
    			ErrorList errors = getTable().getErrors();
    			errors.addError("Fixtures updated", "Table has been updated", ErrorList.SEVERITY_OK);
    			result.setErrors(errors);
    		}
    		return result;
    	}
    	
    	public Map readFixtures(Map request) {
			Map form = new HashMap();
			List fixtures = getFixtures();
			form.put("fixtureDefs", getFixtureDefs());
			form.put("fixtures", fixtures);
			form.put("fixtures_size", fixtures.size());
			return form;
    	}
    	
    	public List getFixtures() {
    		AppConfig appConfig = AppConfig.getAppConfig();
    		JdbcTemplate jt = appConfig.getJdbcTemplate();
    		FixtureDAO fixtureDAO = new FixtureDAO(jt);
    		List<FixtureTO> fixtures = fixtureDAO.getFixtures(null);
    		// holy freaking christ. This is 12 types of wrong. Or 1:02AM types of wrong. Take your pick.
    		List fixturesAsMaps = new ArrayList();
    		for (FixtureTO fixture : fixtures) {
    			Map fixtureMap = new HashMap();
    			Struct.setFromObject(fixtureMap, fixture, false, true, true, fieldNames);
    			fixturesAsMaps.add(fixtureMap);
    		}
    		return fixturesAsMaps;
    	}
    	
    	public List getFixtureDefs() {
    		AppConfig appConfig = AppConfig.getAppConfig();
    		JdbcTemplate jt = appConfig.getJdbcTemplate();
    		FixtureDefDAO fixtureDefDAO = new FixtureDefDAO(jt);
    		return fixtureDefDAO.getFixtureDefs(null);
    	}
   }
      
      
    
    /**
     * Perform this struts action. See the javadoc for this
     * class for more details.
     *
     * @param mapping The struts ActionMapping that triggered this Action
     * @param form An ActionForm (if available) holding user input for this Action
     * @param request The HttpServletRequest for this action
     * @param response The HttpServletResponse for this action
     *
     * @return An ActionForward representing the result to return to the end-user
     *
     * @throws Exception If an exception occurred during action processing
     */
    @SuppressWarnings({ "unchecked", "rawtypes" })
	public ActionForward execute(ActionMapping mapping, ActionForm actionForm, HttpServletRequest request, HttpServletResponse response)
        throws Exception 
    {
		HttpSession session = request.getSession();
		User user = (User) session.getAttribute("user");
		AppConfig appConfig = AppConfig.getAppConfig();
		String forward = "success";
		JdbcTemplate jt = appConfig.getJdbcTemplate();
		String action = request.getParameter("action");
		
		if (action==null) { action = ""; }
		if (action.equals("")) {
			// default action displays entry page
			FixtureTableEditor tableEditor = new FixtureTableEditor();
			request.setAttribute("form", tableEditor.readFixtures(null));
			
		} else if (action.equals("maintain")) {
			Map form = new HashMap();
			Struct.setFromRequest(form, request);
			
			//System.out.println(Struct.structuredMapToString("form", form));
			FixtureTableEditor tableEditor = new FixtureTableEditor();
			tableEditor.removeEmptyRows(form);
			TableEditorResult result = tableEditor.maintainFixtures(form);
			//System.out.println("======================================");
			//System.out.println(Struct.structuredListToString("rows", result.getRows()));
			//System.out.println(Struct.structuredListToString("errors", result.getErrors()));
			form.put("fixtureDefs", tableEditor.getFixtureDefs());
			form.put("fixtures", result.getRows());
			form.put("fixtures_size", result.getRows().size());
			request.setAttribute("errors", result.getErrors());
			request.setAttribute("form", form);
			
			
		} else {
			throw new IllegalArgumentException("Invalid action '" + action + "'");
		}

		
        return mapping.findForward(forward);
    }
    
}
