package com.randomnoun.dmx.web.action;

import java.io.*;
import java.net.URLEncoder;
import java.sql.*;
import java.util.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.*;
import org.springframework.dao.support.DataAccessUtils;
import org.springframework.jdbc.core.JdbcTemplate;

import com.randomnoun.common.ErrorList;
import com.randomnoun.common.Text;
import com.randomnoun.common.Struct;
import com.randomnoun.common.http.HttpUtil;
import com.randomnoun.common.security.User;
import com.randomnoun.common.spring.StructuredResultReader;
import com.randomnoun.dmx.Universe;
import com.randomnoun.dmx.config.AppConfig;
import com.randomnoun.dmx.dao.FixtureDAO;
import com.randomnoun.dmx.dao.FixtureDefDAO;
import com.randomnoun.dmx.dao.ShowDefDAO;
import com.randomnoun.dmx.dao.StageDAO;
import com.randomnoun.dmx.to.FixtureDefTO;
import com.randomnoun.dmx.to.FixtureTO;
import com.randomnoun.dmx.to.ShowDefTO;
import com.randomnoun.dmx.to.StageTO;
import com.randomnoun.dmx.web.Table;
import com.randomnoun.dmx.web.TableEditor;
import com.randomnoun.dmx.web.TableEditor.TableEditorResult;


/**
 * Import/export action
 *
 * Forwards generated by this action:
 * <attributes>
 * success - displays entry page
 * </attributes>
 *
 * @version         $Id$
 * @author          knoxg
 */
public class ImportExportAction
    extends Action {
    /** A revision marker to be used in exception stack traces. */
    public static final String _revision = "$Id$";

    /** Logger instance for this class */
    private static final Logger logger = Logger.getLogger(ImportExportAction.class);

    
    /**
     * Perform this struts action. See the javadoc for this
     * class for more details.
     *
     * @param mapping The struts ActionMapping that triggered this Action
     * @param actionForm An ActionForm (if available) holding user input for this Action
     * @param request The HttpServletRequest for this action
     * @param response The HttpServletResponse for this action
     *
     * @return An ActionForward representing the result to return to the end-user
     *
     * @throws Exception If an exception occurred during action processing
     */
    @SuppressWarnings({ "unchecked", "rawtypes" })
	public ActionForward execute(ActionMapping mapping, ActionForm actionForm, HttpServletRequest request, HttpServletResponse response)
        throws Exception 
    {
		HttpSession session = request.getSession();
		User user = (User) session.getAttribute("user");
		AppConfig appConfig = AppConfig.getAppConfig();
		String forward = "success";
		JdbcTemplate jt = appConfig.getJdbcTemplate();
		String action = request.getParameter("action");
		
		if (action==null) { action = ""; }
		if (action.equals("")) {
			// default action displays entry page
			List topLevel = new ArrayList();
			Map topLevelMap = newItem("Everything");
			topLevel.add(topLevelMap);
			
			List items = new ArrayList();
			topLevelMap.put("children", items);
			items.add(newItem("Devices"));
			
			Map itemMap = newItem("Fixture definitions");
			List itemChildren = new ArrayList();
			itemMap.put("children", itemChildren);
			FixtureDefDAO fixtureDefDAO = new FixtureDefDAO(jt);
			List<FixtureDefTO> fixtureDefs = fixtureDefDAO.getFixtureDefs(null);
			for (int i=0; i<fixtureDefs.size(); i++) {
				itemChildren.add(newItem(fixtureDefs.get(i).getName()));
			}
			items.add(itemMap);
			
			itemMap = newItem("Show definitions");
			itemChildren = new ArrayList();
			itemMap.put("children", itemChildren);
			ShowDefDAO showDefDAO = new ShowDefDAO(jt);
			List<ShowDefTO> showDefs = showDefDAO.getShowDefs(null);
			for (int i=0; i<showDefs.size(); i++) {
				itemChildren.add(newItem(showDefs.get(i).getName()));
			}
			items.add(itemMap);
			
			itemMap = newItem("Stages");
			itemChildren = new ArrayList();
			itemMap.put("children", itemChildren);
			StageDAO stageDAO = new StageDAO(jt);
			List<StageTO> stages = stageDAO.getStages(null);
			for (int i=0; i<stages.size(); i++) {
				Map stageItem = newItem(stages.get(i).getName());
				itemChildren.add(stageItem);
				List itemChildren2 = new ArrayList();
				stageItem.put("children", itemChildren2);
				itemChildren2.add(newItem("Fixtures"));
				itemChildren2.add(newItem("Shows"));
			}
			items.add(itemMap);
			
			request.setAttribute("exportItems", topLevel);
			
		} else if (action.equals("maintain")) {
			
		} else {
			throw new IllegalArgumentException("Invalid action '" + action + "'");
		}

		
        return mapping.findForward(forward);
    }
    
    public Map newItem(String text) {
    	Map m = new HashMap();
    	m.put("text", text);
    	return m;
    }
    
}
