package com.randomnoun.dmx.web.action;

import java.io.*;
import java.net.URLEncoder;
import java.sql.*;
import java.util.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.*;
import org.springframework.dao.support.DataAccessUtils;
import org.springframework.jdbc.core.JdbcTemplate;

import com.randomnoun.common.ErrorList;
import com.randomnoun.common.Text;
import com.randomnoun.common.Struct;
import com.randomnoun.common.http.HttpUtil;
import com.randomnoun.common.security.User;
import com.randomnoun.common.spring.StructuredResultReader;
import com.randomnoun.dmx.config.AppConfig;
import com.randomnoun.dmx.dao.ShowDAO;
import com.randomnoun.dmx.dao.ShowDefDAO;
import com.randomnoun.dmx.dao.ShowPropertyDAO;
import com.randomnoun.dmx.PropertyDef;
import com.randomnoun.dmx.show.Show;
import com.randomnoun.dmx.to.ShowPropertyTO;
import com.randomnoun.dmx.to.ShowTO;
import com.randomnoun.dmx.web.Table;
import com.randomnoun.dmx.web.TableEditor;
import com.randomnoun.dmx.web.TableEditor.TableEditorResult;


/**
 * Show property maintainance action.
 *
 * Forwards generated by this action:
 * <attributes>
 * success - displays entry page
 * </attributes>
 *
 * @version         $Id$
 * @author          knoxg
 */
public class MaintainShowPropertyAction
    extends Action {
    /** A revision marker to be used in exception stack traces. */
    public static final String _revision = "$Id$";

    /** Logger instance for this class */
    private static final Logger logger = Logger.getLogger(MaintainShowPropertyAction.class);

	public Map getParameterMap(HttpServletRequest request) {
		Map map = new HashMap();
		for (Enumeration e = request.getParameterNames(); e.hasMoreElements();) {
			String param = (String) e.nextElement();
			map.put(param, request.getParameter(param));
		}
		return map;
	}



    public static class ShowPropertyTableEditor extends TableEditor {

    	private final static String[] fieldNames = 
    		new String[] { "id", "key", "value" };
    	
    	private long showId;
    	
    	public ShowPropertyTableEditor(long showId) {
    		this.showId = showId;
    	}
    	
    	@Override
		public void createRow(Map row) throws Exception {
    		AppConfig appConfig = AppConfig.getAppConfig();
    		JdbcTemplate jt = appConfig.getJdbcTemplate();
    		ShowPropertyDAO showPropertyDAO = new ShowPropertyDAO(jt);
    		ShowPropertyTO show = new ShowPropertyTO();
    		show.setShowId(showId);
    		Struct.setFromMap(show, row, false, true, false, fieldNames);
    		showPropertyDAO.createShowProperty(show);
		}

		@Override
		public void updateRow(Map row) throws Exception {
			JdbcTemplate jt = AppConfig.getAppConfig().getJdbcTemplate();
			ShowPropertyDAO showPropertyDAO = new ShowPropertyDAO(jt);
    		ShowPropertyTO showProperty = new ShowPropertyTO();
    		showProperty.setShowId(showId);
    		Struct.setFromMap(showProperty, row, false, true, false, fieldNames);
    		showPropertyDAO.updateShowProperty(showProperty);
		}

		@Override
		public void deleteRow(Map row) throws Exception {
			JdbcTemplate jt = AppConfig.getAppConfig().getJdbcTemplate();
			ShowPropertyDAO showPropertyDAO = new ShowPropertyDAO(jt);
			ShowPropertyTO showProperty = new ShowPropertyTO();
			showProperty.setShowId(showId);
    		Struct.setFromMap(showProperty, row, false, true, false, fieldNames);
    		showPropertyDAO.deleteShowProperty(showProperty);
		}

		private void init() {
    	}

    	public void removeEmptyRows(Map form) {
    		removeEmptyRows(form, fieldNames, "showProperties");
    	}
    	
    	/**
    	 * Validates information passed down from the presentation layer.  Checks for
    	 * mandatory and maximum length.
    	 *
    	 * @param row the row containing information for each stocked item to be maintained
    	 *
    	 * @return true if validation successful or false otherwise
    	 */
    	public boolean validateRow(Map row) {
    	    boolean valid = true;
    	    valid = valid & table.checkMandatory("key", 100, "Key"); // @TODO check against IDs in DB
    	    valid = valid & table.checkMandatory("value", 255, "Value"); // @TODO check against IDs in DB
    	    return valid;
    	}
    	  
    	  
    	public TableEditorResult maintainShowProperties(Map request) {
    		TableEditorResult result;
		    List updateErrors;
		    
		    table = new Table(request, "showProperties", "id", Long.class);
		    table.setEditableKey(false);
		    init();

		    // table validation and maintenance
    		if (!validateTable() || !maintainTable()) {
		        // updates failed
    			result = getResult();
    			result.setRows(getTable().getRows());
    			result.setErrors(getTable().getErrors());
    		} else {
    			result = getResult();
    			result.setRows(getShowProperties());
    			ErrorList errors = getTable().getErrors();
    			errors.addError("Shows updated", "Table has been updated", ErrorList.SEVERITY_OK);
    			result.setErrors(errors);
    			AppConfig.getAppConfig().reloadShows();
    		}
    		return result;
    	}
    	
    	public Map readShowProperties(Map request) {
			Map form = new HashMap();
			List showProperties = getShowProperties();
			form.put("showProperties", showProperties);
			form.put("showProperties_size", showProperties.size());
			return form;
    	}
    	
    	public List getShowProperties() {
    		AppConfig appConfig = AppConfig.getAppConfig();
    		JdbcTemplate jt = appConfig.getJdbcTemplate();
    		ShowDAO showDAO = new ShowDAO(jt);
    		ShowPropertyDAO showPropertyDAO = new ShowPropertyDAO(jt);
    		Show show = appConfig.getShow(showId);
    		List<ShowPropertyTO> properties = showPropertyDAO.getShowProperties("showId=" + showId);
    		List propertiesAsMaps = new ArrayList();
    		for (ShowPropertyTO property : properties) {
    			Map showPropertyMap = new HashMap();
    			Struct.setFromObject(showPropertyMap, property, false, true, true, fieldNames);
    			propertiesAsMaps.add(showPropertyMap);
    		}
    		if (show!=null) {
	    		List defaultProperties = show.getDefaultProperties();
	    		for (Iterator i = defaultProperties.iterator(); i.hasNext(); ) {
	    			PropertyDef defaultProperty = (PropertyDef) i.next();
	    			if (Struct.getStructuredListItem(propertiesAsMaps, "key", defaultProperty.getKey())==null) {
	    				Map newProperty = new HashMap();
	    				newProperty.put("key", defaultProperty.getKey());
	    				newProperty.put("value", defaultProperty.getDefaultValue());
	    				newProperty.put("description", defaultProperty.getDescription());
	    				propertiesAsMaps.add(newProperty);
	    			} else {
	    				Map newProperty = Struct.getStructuredListItem(propertiesAsMaps, "key", defaultProperty.getKey());
	    				newProperty.put("description", defaultProperty.getDescription());
	    			}
	    		}
    		}
    		Struct.sortStructuredList(propertiesAsMaps, "key");
    		return propertiesAsMaps;
    	}
    	
   }
      
      
    
    /**
     * Perform this struts action. See the javadoc for this
     * class for more details.
     *
     * @param mapping The struts ActionMapping that triggered this Action
     * @param actionForm An ActionForm (if available) holding user input for this Action
     * @param request The HttpServletRequest for this action
     * @param response The HttpServletResponse for this action
     *
     * @return An ActionForward representing the result to return to the end-user
     *
     * @throws Exception If an exception occurred during action processing
     */
    @SuppressWarnings({ "unchecked", "rawtypes" })
	public ActionForward execute(ActionMapping mapping, ActionForm actionForm, HttpServletRequest request, HttpServletResponse response)
        throws Exception 
    {
		HttpSession session = request.getSession();
		User user = (User) session.getAttribute("user");
		AppConfig appConfig = AppConfig.getAppConfig();
		String forward = "success";
		JdbcTemplate jt = appConfig.getJdbcTemplate();
		String action = request.getParameter("action");
		
		long showId = Long.parseLong(request.getParameter("showId"));
		request.setAttribute("showId", new Long(showId));
		
		try {
			Show show = appConfig.getShow(showId);
		} catch (IllegalArgumentException ile) {
			// request.setAttribute("message", "There was a problem instantiating this show. See the log for details.");
			ErrorList errors = new ErrorList();
			errors.addError("Show error", "There was a problem instantiating this show. See the log for details.");
			request.setAttribute("errors", errors);
			forward = "maintainShow";
		}
		
		if (forward.equals("success")) {
			if (action==null) { action = ""; }
			if (action.equals("") || action.equals("editProperties")) {
				// default action displays entry page
				ShowPropertyTableEditor tableEditor = new ShowPropertyTableEditor(showId);
				request.setAttribute("form", tableEditor.readShowProperties(null));
				if (action.equals("editProperties")) {
					ErrorList errors = new ErrorList();
	    			errors.addError("Shows updated", "Table has been updated; retrieving show properties.", ErrorList.SEVERITY_OK);
					request.setAttribute("errors", errors);
				}
			} else if (action.equals("maintain")) {
				Map form = new HashMap();
				Struct.setFromRequest(form, request);
				
				//System.out.println(Struct.structuredMapToString("form", form));
				ShowPropertyTableEditor tableEditor = new ShowPropertyTableEditor(showId);
				tableEditor.removeEmptyRows(form);
				TableEditorResult result = tableEditor.maintainShowProperties(form);
				//System.out.println("======================================");
				//System.out.println(Struct.structuredListToString("rows", result.getRows()));
				//System.out.println(Struct.structuredListToString("errors", result.getErrors()));
				form.put("showProperties", result.getRows());
				form.put("showProperties_size", result.getRows().size());
				request.setAttribute("errors", result.getErrors());
				request.setAttribute("form", form);
				
			} else {
				throw new IllegalArgumentException("Invalid action '" + action + "'");
			}
		}
		
        return mapping.findForward(forward);
    }
    
}
