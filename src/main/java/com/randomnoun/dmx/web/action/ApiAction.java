package com.randomnoun.dmx.web.action;


import gnu.io.RXTXCommDriver;
import gnu.io.RXTXVersion;

import java.awt.Color;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.ConcurrentHashMap;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.randomnoun.common.ExceptionUtils;
import com.randomnoun.common.Struct;
import com.randomnoun.common.Text;
import com.randomnoun.common.security.User;
import com.randomnoun.common.timer.Benchmark;
import com.randomnoun.common.webapp.upload.MonitoredOutputStream;
import com.randomnoun.common.webapp.upload.OutputStreamListener;
import com.randomnoun.dmx.AudioController;
import com.randomnoun.dmx.AudioSource;
import com.randomnoun.dmx.Controller;
import com.randomnoun.dmx.ExceptionContainer;
import com.randomnoun.dmx.Universe;
import com.randomnoun.dmx.channel.ChannelDef;
import com.randomnoun.dmx.channelMuxer.ChannelMuxer;
import com.randomnoun.dmx.config.AppConfig;
import com.randomnoun.dmx.config.AppConfig.TimestampedShowException;
import com.randomnoun.dmx.fixture.CustomControl;
import com.randomnoun.dmx.fixture.Fixture;
import com.randomnoun.dmx.fixture.FixtureController;
import com.randomnoun.dmx.fixture.FixtureDef;
import com.randomnoun.dmx.fixture.FixtureOutput;
import com.randomnoun.dmx.show.Show;

/**
 * REST API for simple things. 
 * 
 * Quite similar to the fancy controller, but separating it in case
 * the interfaces change. As they do.
 * 
 * TODO version numbers in pathinfo, etc
 *
 * Forwards generated by this action:
 * <attributes>
 * success - displays entry page
 * </attributes>
 *
 * @version         $Id$
 * @author          knoxg
 */
public class ApiAction
    extends Action {
    /** A revision marker to be used in exception stack traces. */
    public static final String _revision = "$Id$";

    /** Logger instance for this class */
    private static final Logger logger = Logger.getLogger(ApiAction.class);

    
    /**
     * Perform this struts action. See the javadoc for this
     * class for more details.
     *
     * @param mapping The struts ActionMapping that triggered this Action
     * @param actionForm An ActionForm (if available) holding user input for this Action
     * @param request The HttpServletRequest for this action
     * @param response The HttpServletResponse for this action
     *
     * @return An ActionForward representing the result to return to the end-user
     *
     * @throws Exception If an exception occurred during action processing
     */
    @SuppressWarnings({ "unchecked", "rawtypes" })
	public ActionForward execute(ActionMapping mapping, ActionForm actionForm, HttpServletRequest request, HttpServletResponse response)
        throws Exception 
    {
		HttpSession session = request.getSession();
		User user = (User) session.getAttribute("user");
		AppConfig appConfig = AppConfig.getAppConfig();
		String forward = "null";
		
		logger.info("api action called with pathInfo '" + request.getPathInfo() + "'");
		logger.info("api action called with queryString '" + request.getQueryString() + "'");
		
    	Controller controller = appConfig.getController();
    	String action = request.getParameter("action");
    	String fixtureIdString = request.getParameter("fixtureId");
    	if (action==null) { action = ""; }
    	

    	if (action.equals("")) {
    		// forward="success";
    		
    	} else if (action.equals("startShow")) {
    		Show show;
    		if (request.getParameter("showId")!=null) {
    			int showId = Integer.parseInt(request.getParameter("showId"));
    			show = appConfig.getShow(showId);
    		} else {
    			// called by powerpoint invoker. possible put into separate struts action ?
    			show = appConfig.getShowByName(request.getParameter("showName"));
    		}
    		if (show==null) {
	    		response.setStatus(HttpServletResponse.SC_NOT_FOUND);
	    		response.getWriter().println("Show not found");
    		} else {
	    		appConfig.startShow(show.getId());
	    		response.setStatus(HttpServletResponse.SC_OK);
	    		response.getWriter().println("Show started");
    		}
    		
    	} else if (action.equals("cancelShow")) {
    		boolean allShows = true;
    		Show show = null;
    		if (request.getParameter("showId")!=null) {
    			allShows = false;
    			int showId = Integer.parseInt(request.getParameter("showId"));
    			show = appConfig.getShow(showId);
    		} else if (request.getParameter("showName")!=null) {
    			allShows = false;
    			show = appConfig.getShowByName(request.getParameter("showName"));
    		}
    		if (allShows) {
    			for (Show s : appConfig.getShows()) {
    				appConfig.cancelShow(s.getId());
    			}
    			response.setStatus(HttpServletResponse.SC_OK);
	    		response.getWriter().println("All shows cancelled");
    		} else {
    			if (show==null) {
    				response.setStatus(HttpServletResponse.SC_NOT_FOUND);
    	    		response.getWriter().println("Show not found");
    			} else {
    				appConfig.cancelShow(show.getId());
    				response.setStatus(HttpServletResponse.SC_OK);
    	    		response.getWriter().println("Show cancelled");
    			}
    		}

    	} else if (action.equals("cancelShowGroup")) {
    		int showGroupId = Integer.parseInt(request.getParameter("showGroupId"));
    		appConfig.cancelShowGroup(showGroupId);
    		response.setStatus(HttpServletResponse.SC_OK);
    		response.getWriter().println("Showgroup cancelled");
    		
    	} else {
    		
    		throw new IllegalArgumentException("Unknown action '" + action + "'");
    	}
    	
    	// request.setAttribute("json", Struct.structuredMapToJson(result));
		return mapping.findForward(forward);
		
    }
    
}
