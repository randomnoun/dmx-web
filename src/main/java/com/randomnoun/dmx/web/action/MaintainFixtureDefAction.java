package com.randomnoun.dmx.web.action;

import gnu.io.PortInUseException;
import gnu.io.RXTXCommDriver;
import gnu.io.RXTXVersion;

import java.awt.Color;
import java.io.IOException;
import java.io.InputStream;
import java.math.BigDecimal;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.TooManyListenersException;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.springframework.dao.support.DataAccessUtils;
import org.springframework.jdbc.core.JdbcTemplate;

import com.jacob.activeX.ActiveXComponent;
import com.jacob.com.SafeArray;
import com.jacob.com.Variant;
import com.jacobgen.dmx._USBDMXProCom;
import com.randomnoun.common.ExceptionUtils;
import com.randomnoun.common.Struct;
import com.randomnoun.common.Text;
import com.randomnoun.common.db.DatabaseTO;
import com.randomnoun.common.db.DatabaseTO.TableColumnTO;
import com.randomnoun.common.db.DatabaseTO.TableTO;
import com.randomnoun.common.security.User;
import com.randomnoun.dmx.Controller;
import com.randomnoun.dmx.Fixture;
import com.randomnoun.dmx.FixtureController;
import com.randomnoun.dmx.config.AppConfig;
import com.randomnoun.dmx.protocol.dmxUsbPro.UsbProWidget;
import com.randomnoun.dmx.protocol.dmxUsbPro.UsbProWidgetTranslator;

/**
 * Manual controller action
 *
 * Forwards generated by this action:
 * <attributes>
 * success - displays entry page
 * </attributes>
 *
 * @version         $Id$
 * @author          knoxg
 */
public class MaintainFixtureDefAction
    extends Action {
    /** A revision marker to be used in exception stack traces. */
    public static final String _revision = "$Id$";

    /** Logger instance for this class */
    private static final Logger logger = Logger.getLogger(MaintainFixtureDefAction.class);

    /**
     * Perform this struts action. See the javadoc for this
     * class for more details.
     *
     * @param mapping The struts ActionMapping that triggered this Action
     * @param form An ActionForm (if available) holding user input for this Action
     * @param request The HttpServletRequest for this action
     * @param response The HttpServletResponse for this action
     *
     * @return An ActionForward representing the result to return to the end-user
     *
     * @throws Exception If an exception occurred during action processing
     */
    @SuppressWarnings({ "unchecked", "rawtypes" })
	public ActionForward execute(ActionMapping mapping, ActionForm actionForm, HttpServletRequest request, HttpServletResponse response)
        throws Exception 
    {
		HttpSession session = request.getSession();
		User user = (User) session.getAttribute("user");
		AppConfig appConfig = AppConfig.getAppConfig();
		JdbcTemplate jt = appConfig.getJdbcTemplate();
		String forward = "success";
    	Map form = new HashMap();
    	
    	Struct.setFromRequest(form, request);

    	long fixtureDefId = -1;
    	String fixtureDefIdString = request.getParameter("fixtureDefId");
    	if (!Text.isBlank(fixtureDefIdString)) { fixtureDefId = Long.parseLong(fixtureDefIdString); };
    	String action = request.getParameter("action");
    	if (action==null) { action = ""; }
    	
    	if (action.equals("getFixtureDef")) {
    		Map fixtureDef = (Map) DataAccessUtils.requiredSingleResult(jt.queryForList(
    			"SELECT lngId, txtName, txtScript " +
    			" FROM tblFixtureDefinitions " +
    			" WHERE lngId = ?", new Object[] { new Integer((int) fixtureDefId) } ));
    		request.setAttribute("fixtureDef", fixtureDef);
    		
    	} else if (action.equals("newFixtureDef")) {
    		Map fixtureDef = new HashMap();
    		fixtureDef.put("lngId", "-1");
    		fixtureDef.put("txtName", "name of fixture");
    		fixtureDef.put("txtScript", getScriptTemplate());
    		request.setAttribute("fixtureDef", fixtureDef);
    				
    	} else if (request.getParameter("updateFixtureDef")!=null) {
    		long lngId = Long.parseLong(request.getParameter("fixtureDef.lngId"));
    		String txtName = request.getParameter("fixtureDef.txtName");
    		String txtScript = request.getParameter("fixtureDef.txtScript");
    		// @TODO validate
    		if (lngId==-1) {
    			jt.update(
    				"INSERT INTO tblFixtureDefinitions (txtName, txtScript) " +
    				" VALUES (?, ?) ",
    				new Object[] { txtName, txtScript });
    			request.setAttribute("message", "Fixture definition created");
    		} else {
    			jt.update(
    				"UPDATE tblFixtureDefinitions " +
    				" SET txtName = ?, txtScript = ? " +
    				" WHERE lngId = ?" , 
    				new Object[] { txtName, txtScript, new Integer((int) lngId) });
    			request.setAttribute("message", "Fixture definition updated");
    		}
    		
    	} else if (action.equals("")) {
    		// initial page load
    		
    	} else {
    		throw new IllegalArgumentException("Unknown action '" + action + "'");
    	}
    	
    	if (forward.equals("success")) {
    		List fixtureDefs = jt.queryForList(
    			"SELECT lngId, txtName " +
    			" FROM tblFixtureDefinitions " +
    			" ORDER BY lngId");
    		request.setAttribute("fixtureDefs", fixtureDefs);
    	}
    	
		return mapping.findForward(forward);
		
    }
    
    private String getScriptTemplate() {
    	return
    	"package com.randomnoun.dmx.scripted;\n" +
    	"\n" +
    	"import java.awt.Color;\n" +
    	"\n" +
    	"import com.randomnoun.dmx.Fixture;\n" +
    	"import com.randomnoun.dmx.FixtureController;\n" +
    	"import com.randomnoun.dmx.FixtureDef;\n" +
    	"import com.randomnoun.dmx.channel.MacroChannelDef;\n" +
    	"import com.randomnoun.dmx.channel.MacroChannelDef.Macro;\n" +
    	"import com.randomnoun.dmx.channel.dimmer.BlueDimmerChannelDef;\n" +
    	"import com.randomnoun.dmx.channel.dimmer.GreenDimmerChannelDef;\n" +
    	"import com.randomnoun.dmx.channel.dimmer.MasterDimmerChannelDef;\n" +
    	"import com.randomnoun.dmx.channel.dimmer.RedDimmerChannelDef;\n" +
    	"import com.randomnoun.dmx.channel.SpeedChannelDef;\n" +
    	"import com.randomnoun.dmx.channel.StrobeChannelDef;\n" +
    	"import com.randomnoun.dmx.channelMuxer.ChannelMuxer;\n" +
    	"import com.randomnoun.dmx.channelMuxer.MacroChannelMuxer;\n" +
    	"import com.randomnoun.dmx.channelMuxer.filter.MasterDimmerChannelMuxer;\n" +
    	"import com.randomnoun.dmx.channelMuxer.primitive.ColorChannelMuxer;\n" +
    	"import com.randomnoun.dmx.channelMuxer.timed.StrobeChannelMuxer;\n" +
    	"import com.randomnoun.dmx.channelMuxer.timed.TimedColorGradientChannelMuxer;\n" +
    	"import com.randomnoun.dmx.timeSource.DistortedTimeSource;\n" +
    	"import com.randomnoun.dmx.timeSource.TimeSource;\n" +
    	"import com.randomnoun.dmx.timeSource.UniverseTimeSource;\n" +
    	"\n" +
    	"/** Fixture definition for xxxx\n" +
    	" * \n" +
    	" * @author name\n" +
    	" */\n" +
    	"public class X0177FixtureDef extends FixtureDef {\n" +
    	"\n" +
    	"	public static class X0177FixtureController extends FixtureController {\n" +
    	"		public X0177FixtureController(Fixture fixture) {\n" +
    	"			super(fixture);\n" +
    	"		}\n" +
    	"	}\n" +
    	"\n" +
    	"	\n" +
    	"	public X0177FixtureDef() {\n" +
    	"		this.vendor = \"Chinese sweatshop workers\";\n" +
    	"		this.model = \"MODEL-12345\";\n" +
    	"		this.maxWattage = 20;\n" +
    	"		this.numDmxChannels=7;\n" +
    	"		\n" +
    	"		this.addChannelDef(new MasterDimmerChannelDef(0));\n" +
    	"		this.addChannelDef(new RedDimmerChannelDef(1));\n" +
    	"		this.addChannelDef(new GreenDimmerChannelDef(2));\n" +
    	"		this.addChannelDef(new BlueDimmerChannelDef(3));\n" +
    	"		this.addChannelDef(new StrobeChannelDef(4, 0, 2, 8, 10, 250)); // 2Hz->10Hz strobe\n" +
    	"	}\n" +
    	"	\n" +
    	"	\n" +
    	"	public ChannelMuxer getChannelMuxer(Fixture fixture) {\n" +
    	"		TimeSource universeTimeSource = new UniverseTimeSource(fixture.getUniverse());\n" +
    	"		// output is determined by\n" +
    	"		//   color DMX values + strobe DMX value\n" +
    	"		// and the fixture can then be dimmed by the master dimmer DMX value\n" +
    	"		\n" +
    	"		ChannelMuxer colorMuxer = new ColorChannelMuxer(fixture);\n" +
    	"		StrobeChannelMuxer strobeMuxer = new StrobeChannelMuxer(colorMuxer, universeTimeSource);\n" +
    	"		return new MasterDimmerChannelMuxer(strobeMuxer);\n" +
    	"	}\n" +
    	"	\n" +
    	"	public FixtureController getFixtureController(Fixture fixture) {\n" +
    	"		return new X0177FixtureController(fixture);\n" +
    	"	}\n" +
    	"	\n" +
    	"}\n";
    }
}
