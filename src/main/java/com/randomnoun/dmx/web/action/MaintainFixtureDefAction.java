package com.randomnoun.dmx.web.action;


import java.io.StringReader;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.springframework.dao.support.DataAccessUtils;
import org.springframework.jdbc.core.JdbcTemplate;

import bsh.Parser;
// import bsh.SimpleNode; - package private. bastardos.

import com.randomnoun.common.ErrorList;
import com.randomnoun.common.Struct;
import com.randomnoun.common.Text;
import com.randomnoun.common.security.User;
import com.randomnoun.dmx.config.AppConfig;

/**
 * Fixture definition maintenance action
 *
 * Forwards generated by this action:
 * <attributes>
 * success - displays entry page
 * </attributes>
 *
 * @version         $Id$
 * @author          knoxg
 */
public class MaintainFixtureDefAction
    extends Action {
    /** A revision marker to be used in exception stack traces. */
    public static final String _revision = "$Id$";

    /** Logger instance for this class */
    private static final Logger logger = Logger.getLogger(MaintainFixtureDefAction.class);

    /**
     * Perform this struts action. See the javadoc for this
     * class for more details.
     *
     * @param mapping The struts ActionMapping that triggered this Action
     * @param form An ActionForm (if available) holding user input for this Action
     * @param request The HttpServletRequest for this action
     * @param response The HttpServletResponse for this action
     *
     * @return An ActionForward representing the result to return to the end-user
     *
     * @throws Exception If an exception occurred during action processing
     */
    @SuppressWarnings({ "unchecked", "rawtypes" })
	public ActionForward execute(ActionMapping mapping, ActionForm actionForm, HttpServletRequest request, HttpServletResponse response)
        throws Exception 
    {
		HttpSession session = request.getSession();
		User user = (User) session.getAttribute("user");
		AppConfig appConfig = AppConfig.getAppConfig();
		JdbcTemplate jt = appConfig.getJdbcTemplate();
		String forward = "success";
    	Map form = new HashMap();
    	Struct.setFromRequest(form, request);
    	ErrorList errors = new ErrorList();

    	long fixtureDefId = -1;
    	String fixtureDefIdString = request.getParameter("fixtureDefId");
    	if (!Text.isBlank(fixtureDefIdString)) { fixtureDefId = Long.parseLong(fixtureDefIdString); };
    	String action = request.getParameter("action");
    	if (action==null) { action = ""; }
    	 
    	
    	if (action.equals("getFixtureDef")) {
    		Map fixtureDef = (Map) DataAccessUtils.requiredSingleResult(jt.queryForList(
    			"SELECT lngId, txtName, txtScript " +
    			" FROM tblFixtureDefinitions " +
    			" WHERE lngId = ?", new Object[] { new Integer((int) fixtureDefId) } ));
    		request.setAttribute("fixtureDef", fixtureDef);
    		
    	} else if (action.equals("newFixtureDef")) {
    		Map fixtureDef = new HashMap();
    		fixtureDef.put("lngId", "-1");
    		fixtureDef.put("txtName", "name of fixture");
    		fixtureDef.put("txtScript", getScriptTemplate());
    		request.setAttribute("fixtureDef", fixtureDef);
    				
    	} else if (request.getParameter("updateFixtureDef")!=null) {
    		long lngId = Long.parseLong(request.getParameter("fixtureDef.lngId"));
    		String txtName = request.getParameter("fixtureDef.txtName");
    		String txtScript = request.getParameter("fixtureDef.txtScript");
    		errors.addErrors(validateScript(txtScript));
    		if (errors.hasErrors()) {
    			Struct.setFromRequest(form, request);
    			request.setAttribute("fixtureDef", form.get("fixtureDef"));
    			
    		} else {
	    		if (lngId==-1) {
	    			jt.update(
	    				"INSERT INTO tblFixtureDefinitions (txtName, txtScript) " +
	    				" VALUES (?, ?) ",
	    				new Object[] { txtName, txtScript });
	    			errors.addError("Fixture created", "Fixture definition created", ErrorList.SEVERITY_OK);
	    		} else {
	    			jt.update(
	    				"UPDATE tblFixtureDefinitions " +
	    				" SET txtName = ?, txtScript = ? " +
	    				" WHERE lngId = ?" , 
	    				new Object[] { txtName, txtScript, new Integer((int) lngId) });
	    			errors.addError("Fixture updated", "Fixture definition updated", ErrorList.SEVERITY_OK);
	    		}
    		} 
    		
    	} else if (action.equals("")) {
    		// initial page load
    		
    	} else {
    		throw new IllegalArgumentException("Unknown action '" + action + "'");
    	}
    	
    	if (forward.equals("success")) {
    		List fixtureDefs = jt.queryForList(
    			"SELECT lngId, txtName " +
    			" FROM tblFixtureDefinitions " +
    			" ORDER BY lngId");
    		request.setAttribute("fixtureDefs", fixtureDefs);
    	}

    	request.setAttribute("errors", errors);
		return mapping.findForward(forward);
		
    }
    
    private String getScriptTemplate() {
    	return
    	"package com.randomnoun.dmx.scripted;\n" +
    	"\n" +
    	"import java.awt.Color;\n" +
    	"\n" +
    	"import com.randomnoun.dmx.Fixture;\n" +
    	"import com.randomnoun.dmx.FixtureController;\n" +
    	"import com.randomnoun.dmx.FixtureDef;\n" +
    	"import com.randomnoun.dmx.channel.MacroChannelDef;\n" +
    	"import com.randomnoun.dmx.channel.MacroChannelDef.Macro;\n" +
    	"import com.randomnoun.dmx.channel.dimmer.BlueDimmerChannelDef;\n" +
    	"import com.randomnoun.dmx.channel.dimmer.GreenDimmerChannelDef;\n" +
    	"import com.randomnoun.dmx.channel.dimmer.MasterDimmerChannelDef;\n" +
    	"import com.randomnoun.dmx.channel.dimmer.RedDimmerChannelDef;\n" +
    	"import com.randomnoun.dmx.channel.SpeedChannelDef;\n" +
    	"import com.randomnoun.dmx.channel.StrobeChannelDef;\n" +
    	"import com.randomnoun.dmx.channelMuxer.ChannelMuxer;\n" +
    	"import com.randomnoun.dmx.channelMuxer.MacroChannelMuxer;\n" +
    	"import com.randomnoun.dmx.channelMuxer.filter.MasterDimmerChannelMuxer;\n" +
    	"import com.randomnoun.dmx.channelMuxer.primitive.ColorChannelMuxer;\n" +
    	"import com.randomnoun.dmx.channelMuxer.timed.StrobeChannelMuxer;\n" +
    	"import com.randomnoun.dmx.channelMuxer.timed.TimedColorGradientChannelMuxer;\n" +
    	"import com.randomnoun.dmx.timeSource.DistortedTimeSource;\n" +
    	"import com.randomnoun.dmx.timeSource.TimeSource;\n" +
    	"import com.randomnoun.dmx.timeSource.UniverseTimeSource;\n" +
    	"\n" +
    	"/** Fixture definition for xxxx\n" +
    	" * \n" +
    	" * @author name\n" +
    	" */\n" +
    	"public class X0177FixtureDef extends FixtureDef {\n" +
    	"\n" +
    	"	public static class X0177FixtureController extends FixtureController {\n" +
    	"		public X0177FixtureController(Fixture fixture) {\n" +
    	"			super(fixture);\n" +
    	"		}\n" +
    	"	}\n" +
    	"\n" +
    	"	\n" +
    	"	public X0177FixtureDef() {\n" +
    	"		this.vendor = \"Chinese sweatshop workers\";\n" +
    	"		this.model = \"MODEL-12345\";\n" +
    	"		this.maxWattage = 20;\n" +
    	"		this.numDmxChannels=7;\n" +
    	"		\n" +
    	"		this.addChannelDef(new MasterDimmerChannelDef(0));\n" +
    	"		this.addChannelDef(new RedDimmerChannelDef(1));\n" +
    	"		this.addChannelDef(new GreenDimmerChannelDef(2));\n" +
    	"		this.addChannelDef(new BlueDimmerChannelDef(3));\n" +
    	"		this.addChannelDef(new StrobeChannelDef(4, 0, 2, 8, 10, 250)); // 2Hz->10Hz strobe\n" +
    	"	}\n" +
    	"	\n" +
    	"	\n" +
    	"	public ChannelMuxer getChannelMuxer(Fixture fixture) {\n" +
    	"		TimeSource universeTimeSource = new UniverseTimeSource(fixture.getUniverse());\n" +
    	"		// output is determined by\n" +
    	"		//   color DMX values + strobe DMX value\n" +
    	"		// and the fixture can then be dimmed by the master dimmer DMX value\n" +
    	"		\n" +
    	"		ChannelMuxer colorMuxer = new ColorChannelMuxer(fixture);\n" +
    	"		StrobeChannelMuxer strobeMuxer = new StrobeChannelMuxer(colorMuxer, universeTimeSource);\n" +
    	"		return new MasterDimmerChannelMuxer(strobeMuxer);\n" +
    	"	}\n" +
    	"	\n" +
    	"	public FixtureController getFixtureController(Fixture fixture) {\n" +
    	"		return new X0177FixtureController(fixture);\n" +
    	"	}\n" +
    	"	\n" +
    	"}\n";
    }
    
    public static class ScriptLocationErrorData extends ErrorList.ErrorData {
    	long rowNumber;
    	long columnNumber;
		public ScriptLocationErrorData(String errorField, String shortText, String longText,
				int severity, long rowNumber, long columnNumber) 
		{
			super(shortText, longText, errorField, severity);
			this.rowNumber = rowNumber;
			this.columnNumber = columnNumber;
		}
		public long getRowNumber() { return rowNumber; }
		public long getColumnNumber() { return columnNumber; }
    }
    
    private ErrorList validateScript(String script) {
    	ErrorList errors = new ErrorList();
    	Parser parser = new Parser(new StringReader(script));
    	try {
			while( ! parser.Line() /* eof */ ) {
				/*SimpleNode*/ Object node = parser.popNode(); // (See the bsh.BSH* classes) - classes are package private
			}
		} catch (bsh.ParseException e) {
			// ParseException.getErrorLineNumber() raises NPEs
			Pattern p = Pattern.compile("Parse error at line ([0-9]+*), column ([0-9]+)");
			Matcher m = p.matcher(e.getMessage());
			if (m.matches()) {
				errors.add(new ScriptLocationErrorData("script", "Parse error", 
					"There was an error parsing the script: " + e.getMessage(), 
					ErrorList.SEVERITY_ERROR,
					Long.parseLong(m.group(1)), Long.parseLong(m.group(2))));
			} else {
				errors.addError("script", "Parse error", "There was an error parsing the script: " +
					e.getMessage());
			}
			e.printStackTrace();
		}
    	
        //ScriptEngineManager factory = new ScriptEngineManager();
        //factory.registerEngineName("Beanshell", new BshScriptEngineFactory());
        //ScriptEngine engine = factory.getEngineByName("Beanshell");
        // engine.eval("print('Hello, World')");
    	
    	
        return errors;
    }
    
}

